First, you will need to know the username under which your web server runs. 

If you are using Apache, it can be apache or httpd, www-data, etc. 
On most Debian-like systems, Apache is www-data. 
For nginx, generally, it is also www-data.

to know:

ps aux | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d\  -f1

Giving permissions to the web server: using chmod and chown
Doing a chmod of 666 or 777 (the go-to solution for that kind of problems in bad documentations/tutorials) can magically make things work, but is insecure. Giving 666 or 777 permissions will give access to "others". So not just Apache, but also grandmother and nsa (provided that those user accounts exist on your machine - but no really, please avoid doing this unless it's just for testing/troubleshooting).

It is better to be more specific and give permissions to just you and Apache. Change the group of your files to give the full control on your files to the web server. To do this, change the owner recursively:

chown -R www-data:www-data your/folder/
But most likely, you may want to keep full access on your files by changing the group only:

chown -R yourusername:www-data your/folder/
Then, do the appropriate chmod to give the group www-data the same permissions as you. For example, if the current mode is 640 (6 for you, 4 for www-data, 0 for others, translating to -rw-r-----), set it to 660 (6 for you, 6 for www-data, 0 for others, translating to -rw-rw----). See rahmu's answer to learn more about file modes, it's an old, however elegant mechanism.

To avoid manipulating arcane numbers with chmod, you can also use this syntax:

chmod -R g+rw your/folder/
It means "to the group (g), add (+) read and write (rw) permissions on folder your/folder/, recursively (-R)".

In 90% of cases, this should be enough.
